{"version":3,"sources":["images/piso_industrial.jpg","images/capas_compresion.jpg","images/losas_cimentacion.jpg","images/muro_concreto.jpg","images/prefabricados.jpg","Components/Titulo.js","Components/Home.js","Components/Estructura.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Titulo","props","to","tituloEstructura","Home","Button","variant","className","Estructura","Image","src","piso","alt","roundedCircle","fluid","capas","losas","muro","prefabricados","App","useState","seleccionarEstructura","e","preventDefault","console","log","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,+C,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mNCe5BC,MAZf,SAAgBC,GACd,OACE,6BACE,8CACA,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,4BACJ,iFACA,6BACA,4BAAKD,EAAME,oB,QCQFC,MAbf,SAAcH,GACZ,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAMC,GAAG,2BACP,kBAACG,EAAA,EAAD,CAAQC,QAAQ,OAAOC,UAAU,QAAjC,6B,oGC+BOC,MA/Bf,SAAoBP,GAClB,OACE,yBAAKM,UAAU,iBACb,kBAAC,EAAD,CAAQJ,iBAAkBF,EAAME,mBAChC,6BACA,yBAAKI,UAAU,eACb,yBAAKA,UAAU,aACb,kBAACE,EAAA,EAAD,CAAOC,IAAKC,IAAMC,IAAI,OAAOC,eAAa,EAACC,OAAK,IAChD,gDAEF,yBAAKP,UAAU,aACb,kBAACE,EAAA,EAAD,CAAOC,IAAKK,IAAOH,IAAI,OAAOC,eAAa,EAACC,OAAK,IACjD,uDAEF,yBAAKP,UAAU,aACb,kBAACE,EAAA,EAAD,CAAOC,IAAKM,IAAOJ,IAAI,OAAOC,eAAa,EAACC,OAAK,IACjD,wDAEF,yBAAKP,UAAU,aACb,kBAACE,EAAA,EAAD,CAAOC,IAAKO,IAAML,IAAI,OAAOC,eAAa,EAACC,OAAK,IAChD,kDAEF,yBAAKP,UAAU,aACb,kBAACE,EAAA,EAAD,CAAOC,IAAKQ,IAAeN,IAAI,OAAOC,eAAa,EAACC,OAAK,IACzD,2D,MCSKK,MApCf,WAAgB,IAAD,EACsCC,mBAAS,6CAD/C,mBACLjB,EADK,KAGPkB,GAHO,KAGiB,SAACC,GAC7BA,EAAEC,iBACFC,QAAQC,IAAI,UAGd,OACE,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CACEmB,OAAK,EACLC,KAAK,IACLC,UAAW,SAAC3B,GAAD,OAAW,kBAAC,EAAD,eACpBoB,sBAAuBA,GACnBpB,OAGR,kBAAC,IAAD,CACEyB,OAAK,EACLC,KAAK,0BACLC,UAAW,SAAC3B,GAAD,OAAW,kBAAC,EAAD,eACpBE,iBAAkBA,GACdF,YCrBF4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACT,kBAAC,IAAD,KACE,kBAAC,EAAD,OACgBC,SAASC,eAAe,SDsHpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ecd51c8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/piso_industrial.c57d982a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/capas_compresion.4956a05f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/losas_cimentacion.e31835d3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/muro_concreto.9be71f0d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/prefabricados.a8bc6a08.jpg\";","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nfunction Titulo(props) {\n  return(\n    <div>\n      <h1>CALCULADORA DE</h1>\n      <h2><Link to=\"/\">MACROFIBRAS DE CONCRETO</Link></h2>\n      <p>Instituto Mexicano del Cemento y del Concreto A.C.</p>\n      <hr/>\n      <h3>{props.tituloEstructura}</h3>\n    </div>\n  )\n}\n\nexport default Titulo;","import React from 'react';\nimport Titulo from './Titulo';\nimport {Link} from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\n\nfunction Home(props) {\n  return (\n    <div>\n      <Titulo />\n      <Link to=\"/seleccionar-estructura\">\n        <Button variant=\"dark\" className=\"mt-3\">  \n          SELECCIONAR ESTRUCTURA\n        </Button>\n      </Link>\n    </div>\n  )\n} \n\nexport default Home;","import React from 'react';\nimport Titulo from './Titulo';\nimport Image from 'react-bootstrap/Image'\nimport './Estructura.css';\nimport piso from '../images/piso_industrial.jpg';\nimport capas from '../images/capas_compresion.jpg';\nimport losas from '../images/losas_cimentacion.jpg';\nimport muro from '../images/muro_concreto.jpg';\nimport prefabricados from '../images/prefabricados.jpg';\n\nfunction Estructura(props) {\n  return(\n    <div className=\"wpestructuras\">\n      <Titulo tituloEstructura={props.tituloEstructura} />\n      <hr/>\n      <div className=\"estructuras\">\n        <div className=\"secciones\">\n          <Image src={piso} alt=\"Logo\" roundedCircle fluid/>\n          <h2>PISO INDUSTRIAL</h2>\n        </div>\n        <div className=\"secciones\">\n          <Image src={capas} alt=\"Logo\" roundedCircle fluid/>\n          <h2>CAPAS DE COMPRESIÓN</h2>\n        </div>\n        <div className=\"secciones\">\n          <Image src={losas} alt=\"Logo\" roundedCircle fluid/>\n          <h2>LOSAS DE CIMENTACIÓN</h2>\n        </div>\n        <div className=\"secciones\">\n          <Image src={muro} alt=\"Logo\" roundedCircle fluid/>\n          <h2>MUROS DE CONCRETO</h2>\n        </div>\n        <div className=\"secciones\">\n          <Image src={prefabricados} alt=\"Logo\" roundedCircle fluid/>\n          <h2>ELEMENTOS PREFABRICADOS</h2>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Estructura;","import React, { useState } from 'react';\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Home from './Components/Home';\nimport Estructura from './Components/Estructura';\n\nimport './App.css';\n\nfunction App() {\n  const [ tituloEstructura, useTituloEstructura ] =  useState(\"¿QUE TIPO DE ESTRUCTURA VA A ELABORAR?\");\n\n  const seleccionarEstructura = (e) => {\n    e.preventDefault();\n    console.log(\"hola\");\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <HashRouter>\n          <Switch>\n              <Route \n                exact \n                path=\"/\" \n                component={(props) => <Home \n                  seleccionarEstructura={seleccionarEstructura}\n                  {...props}\n                />}\n              />\n              <Route \n                exact \n                path=\"/seleccionar-estructura\" \n                component={(props) => <Estructura\n                  tituloEstructura={tituloEstructura}\n                  {...props}\n                />}\n              />\n          </Switch>\n        </HashRouter>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<BrowserRouter>\n  <App />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}